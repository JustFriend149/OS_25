Работа с pipe. Часть 1

Для работы с pipe можно воспользоваться системными вызовами write() для записи и read() для чтения аналогично тому, как это делалось для записи в файл и чтения из файла. Различия в том, что при чтении информация из файла не исчезает, а байт, прочитанный из pipe удаляется.
Для создания pipe  используется системный вызов pipe(), которому в качестве параметра должен быть передан масссив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дескприптор для чтения, а элемент с индексом 1 используется для записи.

Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребенок может отправлять информацию через pipe любому из своих предков, так же, как и читать информацию, отправленную ими в pipe.
Pipe существует до тех пор, пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу, или в процессе работы явно закрыл входной и выходной поток

Работа с pipe. Часть 2.
Двунаправленная связь между родственными процессами.

Для организации двунаправленной связи легче использовать два отдельных канала связи - pipe1 и pipe2. Pipe1 будет передовать информацию от процесса-родителя процессу-ребенку, а pipe2 - в обратном направлении.
Файловые дескприпторы разных Pipe будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток pipe1 (close(fd1[0])), а также выходной поток pipe2 (close(fd2[1]))
Для дочернего процесса закрываем входной поток pipe1 и входной поток pipe2.
После записи информации в pipe родительским процессом выполняется чтение из pipe2, при этом дочерний процесс еще ничего не записал в pipe2. Поэтому родительский процесс при попытке чтения из pipe2 блокируется и ждет появление информации.
Информация от дочернего процесса в pipe2 появляется после того, как процесс-ребенок прочитает информацию из pipe1.
Поэтому дочерний процесс заканчивает работу раньше, чем процесс-родитель прочитает информацию от него из pipe2.

Результат выполнения программы pr009m2.out:

Читаем строку, отправленную процессом-ребенком...
Строка, прочитанная дочерним процессом: Информация для дочернего процесса от родителя
Процесс ребенок завершил работу
Прочитанная строка: Информация для родительского процесса от ребенка
Процесс родитель завершил работу
